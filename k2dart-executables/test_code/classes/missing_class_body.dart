class A
{
}


class B/* (val a:int,var b:int) */
{
final int a;
int b;

B(this.a,this.b,);
}


/* data */ class C/* (var a:int,val b:String) */
{
int a;
final String b;

C(this.a,this.b,);

C copyWith({
   int? a,
   String? b,
}) {
  return C(
    a: a ?? this.a,
    b: b ?? this.b,
  );
}

// AUTOGENERATED METHOD
//TODO for maps substitute <field>==other.<field> with mapEquals(<field>,other.<field>
//TODO for lists substitute <field>==other.<field> with listEquals(<field>,other.<field>
@override
bool operator ==(Object other) =>
     identical(this, other) ||
     other is C &&
     runtimeType == other.runtimeType &&
     a == other.a &&
     b == other.b;

@override
int get hashCode => a.hashCode ^ b.hashCode;
}


class C
{

}
